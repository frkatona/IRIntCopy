import pandas as pd
import matplotlib.pyplot as plt
import os
from scipy.optimize import curve_fit
import numpy as np
from main import Peak_Integration, Get_Convention, Get_Gradient_Color

# Pseudo-Voigt Function
def pseudo_voigt(x, A, mu, sigma, gamma, eta):
    gaussian = (1 - eta) * np.exp(-((x - mu)**2) / (2 * sigma**2))
    lorentzian = eta / (1 + ((x - mu) / gamma)**2)
    return A * (gaussian + lorentzian)

# Function to fit Pseudo-Voigt and plot
def Fit_And_Plot_Pseudo_Voigt_And_A_Bar(readpath):
    # Load consolidated spectra from the CSV generated by the first script
    df_tot = pd.read_csv(readpath)
    
    peak_start = 2100 #1200
    peak_stop = 2225 #1300
    df_subset = df_tot[(df_tot['cm-1'] >= peak_start) & (df_tot['cm-1'] <= peak_stop)]
    
    # Initialize a dictionary to store fit parameters and 'A' parameters for each dataset
    fit_params_dict = {}
    A_params_dict = {}
    
    # Plot initialization for Pseudo-Voigt fit
    plt.figure(figsize=(14, 8))
    
    # Fit the Pseudo-Voigt function to each dataset
    for i, columnname in enumerate(df_subset.columns[1:]):  # Skip the 'cm-1' column
        y_data = df_subset[columnname]
        x_data = df_subset['cm-1']
        
        # Initial guess (A, mu, sigma, gamma, eta)
        max_y = max(y_data)
        max_x = x_data.iloc[np.argmax(y_data)]
        initial_guess = [max_y, max_x, 10, 10, 0.5]
        
        # Perform curve fitting
        params, _ = curve_fit(pseudo_voigt, x_data, y_data, p0=initial_guess)
        
        # Store the fit parameters and 'A' parameter
        fit_params_dict[columnname] = params
        A_params_dict[columnname] = params[0]
        
        # Plot the original data
        plt.plot(x_data, y_data, label=f'Original - {columnname}')
        
        # Plot the fitted curve
        plt.plot(x_data, pseudo_voigt(x_data, *params), linestyle='--', label=f'Fitted - {columnname}')
    
    plt.xlabel('Wavenumber (cm-1)', fontsize=14)
    plt.ylabel('Absorbance', fontsize=14)
    plt.title('Pseudo-Voigt Fit on Original Data', fontsize=16)
    plt.legend()
    plt.grid(True)
    
    print("Fit Parameters: [A, mu, sigma, gamma, eta]")
    for key, value in fit_params_dict.items():
        print(f"{key}: {value}")
    
    # Create DataFrame from the amplitude dictionary
    A_params_df = pd.DataFrame(list(A_params_dict.items()), columns=['Sample', 'Amplitude (A)'])
    
    # Plot the bar graph for amplitude (A) parameter
    plt.figure(figsize=(14, 8))
    plt.bar(A_params_df['Sample'], A_params_df['Amplitude (A)'], color='skyblue', edgecolor='black')
    plt.xlabel('Sample', fontsize=14)
    plt.ylabel('Amplitude (A)', fontsize=14)
    plt.title('Amplitude (A) Parameter for Each Sample', fontsize=16)
    plt.xticks(rotation=30)
    plt.grid(True, axis='y')
    
    plt.show()

def Integrate_And_Plot_Bar_Graph(readpath):
    # Load consolidated spectra from the CSV generated by the first script
    df_tot = pd.read_csv(readpath)

    # Define wavenumber regions of interest for peak integration
    wn_low = [780, 830, 970, 2100, 2930, 3060]
    wn_high = [830, 930, 1150, 2225, 3000, 3080]
    groupname = ['Si-CH3', 'Si-H (bend)', 'Si-O-Si', 'Si-H (stretch)', 'CH3', 'vinyl (C=C)']

    # Create a dataframe to store peak areas
    df_area = pd.DataFrame(index=groupname)

    # Convert wavenumbers to indices
    wn_array = df_tot['cm-1'].to_numpy()

    # Plot initialization and color settings
    color_list = []
    num_samples = len(df_tot.columns) - 1
    for i, columnname in enumerate(df_tot.columns[1:]):  # Skip the 'cm-1' column
        split_columnname = columnname.split("_")
        if len(split_columnname) == 2:
            agent_loading, time_in_seconds = columnname.split("_")[0], columnname.split("_")[1]
        elif len(split_columnname) == 3:
            _, agent_loading, time_in_seconds = columnname.split("_")[0], columnname.split("_")[1], columnname.split("_")[2]
        
        # Integrate the peak areas
        wn_corrected = df_tot[columnname].to_numpy()
        area = Peak_Integration(wn_corrected, wn_array, wn_low, wn_high)
        df_area[columnname] = area

        # Conditional formatting for colors
        base_color = Get_Convention('agent-loading', agent_loading)
        try:
            color = Get_Gradient_Color(base_color, 1 - i/num_samples)
        except:
            color = 'black'
            print(f"Error: {agent_loading} is not a valid agent loading.")
        color_list.append(color)

    # Plot the bar graph for peak areas
    ax_area = df_area.plot.bar(title='Peak Areas', rot=30, color=color_list, edgecolor='black', linewidth=1)
    ax_area.set_title('Peak Areas')
    plt.show()


    # Export the integrated peak areas to a CSV
    base_name = os.path.basename(readpath)
    name_without_extension = os.path.splitext(base_name)[0]
    new_name = f"{name_without_extension}_peak_areas.csv"
    writepath = os.path.join(os.path.dirname(readpath), new_name)
    df_area.to_csv(writepath)

##----------------------------MAIN CODE START----------------------------##

# readpath = r'exports\230831_cb-cure-crazy-long-scan-cure-extent-compare_consolidated.csv'
readpath = r"exports\221130_cbLaserSaltPlate_8A_5e-3_consolidated.csv"
Fit_And_Plot_Pseudo_Voigt_And_A_Bar(readpath)
# Integrate_And_Plot_Bar_Graph(readpath)