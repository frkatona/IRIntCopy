import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import os
from scipy.optimize import curve_fit
from scipy.signal import find_peaks, peak_widths
import numpy as np
from main import Extract_Filename_Metadata
import numpy as np
from scipy.optimize import curve_fit

"""
step 2: 
takes corrected IR spectra,
fits peak of interest to pseudo-voigt,
extracts/exports peak-wing difference,
generates two plots: the psuedo-voigt scatterfit and the peak-wing values bar graph
"""

# Pseudo-Voigt Function
def pseudo_voigt(x, A, mu, sigma, gamma, eta):
    gaussian = (1 - eta) * np.exp(-((x - mu)**2) / (2 * sigma**2))
    lorentzian = eta / (1 + ((x - mu) / gamma)**2)
    return A * (gaussian + lorentzian)

# Function to fit Pseudo-Voigt and plot
def Fit_And_Plot_Pseudo_Voigt_And_A_Bar(readpath):
    # Load consolidated spectra from the CSV generated by the first script
    df_tot = pd.read_csv(readpath)
    
    # Define the peak region of interest (currently Si-H stretch peak which decreases with cure extent)
    peak_start = 2100
    peak_stop = 2225
    df_subset = df_tot[(df_tot['cm-1'] >= peak_start) & (df_tot['cm-1'] <= peak_stop)]
    
    # Initialize a dictionary to store fit parameters, 'Peak-Wing Difference', and metadata for each dataset
    fit_params_dict = {}
    peak_wing_diff_dict = {}
    metadata_dict = {}
    
    # Extract and sort the metadata
    for columnname in df_subset.columns[1:]:
        metadata = Extract_Filename_Metadata(columnname)
        if metadata is not None:
            _, _, agent_loading, time_value, _ = metadata
            metadata_dict[columnname] = (agent_loading, float(time_value))
    
    # Sort columns based on metadata (agent_loading and time_value)
    sorted_columns = sorted(metadata_dict, key=lambda x: (metadata_dict[x][0], metadata_dict[x][1]))

    # Fit the Pseudo-Voigt function to each dataset in the order of sorted_columns
    for i, columnname in enumerate(sorted_columns):
        y_data = df_subset[columnname].to_numpy()
        x_data = df_subset['cm-1'].to_numpy()
        
        # Initial guess (A, mu, sigma, gamma, eta)
        max_y = max(y_data)
        max_x = x_data[np.argmax(y_data)]
        initial_guess = [max_y, max_x, 10, 10, 0.5]
        
        # Perform curve fitting
        params, _ = curve_fit(pseudo_voigt, x_data, y_data, p0=initial_guess)
        
        # Store the fit parameters
        fit_params_dict[columnname] = params
        
        # Fit the Pseudo-Voigt function and find peak max
        fitted_y = pseudo_voigt(x_data, *params)
        peak_max = max(fitted_y)

        # Find peaks and calculate widths
        peaks, _ = find_peaks(fitted_y)
        if len(peaks) > 0:
            results_half = peak_widths(fitted_y, peaks, rel_height=0.5)
            if len(results_half[2]) > 0 and len(results_half[3]) > 0:
                wing_min_indices = [int(min(max(idx, 0), len(fitted_y) - 1)) for idx in [results_half[2][0], results_half[3][0]]]
                wing_min = min(fitted_y[wing_min_indices])
            else:
                wing_min = min(fitted_y)
        else:
            wing_min = min(fitted_y)

        # Calculate and store the peak-wing difference
        peak_wing_diff = peak_max - wing_min
        peak_wing_diff_dict[columnname] = peak_wing_diff
        
        # Plot the original data and fitted curve
        plt.plot(x_data, y_data, label=f'Original - {columnname}', color='skyblue')
        plt.plot(x_data, fitted_y, linestyle='--', label=f'Fitted - {columnname}', color='navy')

    plt.xlabel('Wavenumber (cm-1)', fontsize=14)
    plt.ylabel('Absorbance', fontsize=14)
    plt.title('Pseudo-Voigt Fit', fontsize=16)
    plt.legend()
    plt.grid(True)

    print("Fit Parameters: [A, mu, sigma, gamma, eta]")
    for key, value in fit_params_dict.items():
        print(f"{key}: {value}")

    # Creating the DataFrame for the plot
    peak_wing_diff_df = pd.DataFrame([(col, peak_wing_diff_dict[col], *metadata_dict[col]) for col in sorted_columns], columns=['Sample', 'Amplitude', 'Agent Loading', 'Time Value'])
    
    # Sort the DataFrame by agent loading and time value
    peak_wing_diff_df.sort_values(by=['Sample'], key=lambda x: x.map(metadata_dict.get), inplace=True)
    
    # Export the DataFrame to a CSV
    base_name = os.path.basename(readpath)
    name_without_extension = os.path.splitext(base_name)[0]
    new_name = f"{name_without_extension}_PV-Amplitudes.csv"
    writepath = os.path.join(os.path.dirname(readpath), new_name)
    peak_wing_diff_df.to_csv(writepath, index=False)

    # Assign unique colors to each loading value
    loading_values = [metadata_dict[col][0] for col in peak_wing_diff_df['Sample']]
    unique_loadings = list(set(loading_values))
    color_map = cm.get_cmap('tab10', len(unique_loadings))
    loading_color_dict = dict(zip(unique_loadings, color_map(range(len(unique_loadings)))))
    bar_colors = [loading_color_dict[loading] for loading in loading_values]

    # Plot the bar graph for 'Peak-Wing Difference' with different colors for each loading value
    plt.figure(figsize=(14, 8))
    plt.bar(peak_wing_diff_df['Sample'], peak_wing_diff_df['Amplitude'], color=bar_colors, edgecolor='black')
    plt.xlabel('Sample', fontsize=14)
    plt.ylabel('Peak-Wing Difference', fontsize=14)
    plt.title('Peak-Wing Difference for Each Sample Sorted by Agent Loading and Time', fontsize=16)
    plt.xticks(rotation=30)
    plt.grid(True, axis='y')
    
    def exponential_decay(x, a, b, c):
        return a * np.exp(-b * x) + c

    plt.figure(figsize=(14, 8))
    plt.scatter(peak_wing_diff_df['Time Value'], peak_wing_diff_df['Amplitude'], c=bar_colors, edgecolor='black')

    # Fit exponential decay to each loading value separately
    for loading in unique_loadings:
        loading_indices = [i for i, val in enumerate(loading_values) if val == loading]
        loading_time_values = peak_wing_diff_df.loc[loading_indices, 'Time Value']
        loading_amplitudes = peak_wing_diff_df.loc[loading_indices, 'Amplitude']
        loading_color = loading_color_dict[loading]  # Get the color for the loading value

        # Perform curve fitting
        params, _ = curve_fit(exponential_decay, loading_time_values, loading_amplitudes)

        # Generate fitted curve with more samples
        dense_time_values = np.linspace(min(loading_time_values), max(loading_time_values), 100)
        fitted_curve = exponential_decay(dense_time_values, *params)

        # Plot fitted curve
        plt.plot(dense_time_values, fitted_curve, label=f'Loading: {loading}', linewidth=1, color=loading_color)

    plt.xlabel('Time (h)', fontsize=14)
    plt.legend()
    plt.ylabel('Peak-Wing Difference', fontsize=14)
    plt.title('Peak-Wing Difference vs Time', fontsize=16)
    plt.xticks(rotation=30)
    plt.grid(True, axis='y')

    plt.show()

##----------------------------MAIN CODE START----------------------------##

readpath = r"exports\CSV_exports\231208_4xCB-loading_KBrTransmission_ambient-cure_consolidated.csv"
Fit_And_Plot_Pseudo_Voigt_And_A_Bar(readpath)