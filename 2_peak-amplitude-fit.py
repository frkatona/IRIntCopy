import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import os
from lmfit import minimize, Parameters
from main import Extract_Filename_Metadata

"""
step 2: 
takes corrected IR spectra,
fits peak of interest to pseudo-voigt (PV),
extracts/exports amplitudes for the PV peak of interest,
generates two plots: the PV scatterfit and the PV amplitude bar graph
"""

def pseudo_voigt(x, A, mu, sigma, gamma, eta):
    gaussian = (1 - eta) * np.exp(-((x - mu)**2) / (2 * sigma**2))
    lorentzian = eta / (1 + ((x - mu) / gamma)**2)
    return A * (gaussian + lorentzian)

def Fit_And_Plot_Pseudo_Voigt_And_A_Bar(readpath):
    # Load consolidated spectra from the CSV generated by the first script
    df_tot = pd.read_csv(readpath)
    
    # Define the peak region of interest (currently Si-H stretch peak which decreases with cure extent)
    peak_start = 2100
    peak_stop = 2225
    df_subset = df_tot[(df_tot['cm-1'] >= peak_start) & (df_tot['cm-1'] <= peak_stop)]
    
    # Initialize a dictionary to store fit parameters, 'Peak-Wing Difference', and metadata for each dataset
    fit_params_dict = {}
    metadata_dict = {}
    
    # Extract and sort the metadata
    for columnname in df_subset.columns[1:]:
        metadata = Extract_Filename_Metadata(columnname)
        if metadata is not None:
            _, _, agent_loading, time_value, _ = metadata
            metadata_dict[columnname] = (agent_loading, float(time_value))
    
    # Sort columns based on metadata (agent_loading and time_value)
    sorted_columns = sorted(metadata_dict, key=lambda x: (metadata_dict[x][0], metadata_dict[x][1]))

    # Fit the Pseudo-Voigt function to each dataset in the order of sorted_columns
    for i, columnname in enumerate(sorted_columns):
        y_data = df_subset[columnname].to_numpy()
        x_data = df_subset['cm-1'].to_numpy()
        
        # Initial guess (A, mu, sigma, gamma, eta)
        max_y = max(y_data)
        max_x = x_data[np.argmax(y_data)]
        initial_guess = [max_y, max_x, 10, 10, 0.5]
        
        # Create lmfit Parameters object
        params = Parameters()
        params.add('A', value=initial_guess[0])
        params.add('mu', value=initial_guess[1])
        params.add('sigma', value=initial_guess[2])
        params.add('gamma', value=initial_guess[3])
        params.add('eta', value=initial_guess[4])
        
        # Define the residual function for lmfit
        def residual(params, x, y):
            A = params['A'].value
            mu = params['mu'].value
            sigma = params['sigma'].value
            gamma = params['gamma'].value
            eta = params['eta'].value
            model = pseudo_voigt(x, A, mu, sigma, gamma, eta)
            return y - model
        
        # Perform lmfit minimize
        result = minimize(residual, params, args=(x_data, y_data))
        
        # Store the fit parameters and their errors
        fit_params_dict[columnname] = {
            'A': result.params['A'].value,
            'mu': result.params['mu'].value,
            'sigma': result.params['sigma'].value,
            'gamma': result.params['gamma'].value,
            'eta': result.params['eta'].value,
            'A_err': result.params['A'].stderr,
            'mu_err': result.params['mu'].stderr,
            'sigma_err': result.params['sigma'].stderr,
            'gamma_err': result.params['gamma'].stderr,
            'eta_err': result.params['eta'].stderr
        }
        
        # Fit the Pseudo-Voigt function and find peak max
        fitted_y = pseudo_voigt(x_data, *result.params.values())
        peak_max = max(fitted_y)

        # Plot the original data and fitted curve
        plt.plot(x_data, y_data, label=f'Original - {columnname}', color='skyblue')
        plt.plot(x_data, fitted_y, linestyle='--', label=f'Fitted - {columnname}', color='navy')

    plt.xlabel('Wavenumber (cm-1)', fontsize=14)
    plt.ylabel('Absorbance', fontsize=14)
    plt.title('Pseudo-Voigt Fit', fontsize=16)
    plt.legend()
    plt.grid(True)

    # print("Fit Parameters: [A, mu, sigma, gamma, eta]")
    for key, value in fit_params_dict.items():
        print(f"{key}: {value}")
        print(f"Errors: [A, mu, sigma, gamma, eta]")
        print(f"{key}: [{value['A_err']}, {value['mu_err']}, {value['sigma_err']}, {value['gamma_err']}, {value['eta_err']}]")

    # Creating the DataFrame for the plot
    PV_amplitude_df = pd.DataFrame([(col, fit_params_dict[col]['A'], fit_params_dict[col]['A_err'], *metadata_dict[col]) for col in sorted_columns], columns=['Sample', 'Amplitude', 'Amplitude Error', 'Agent Loading', 'Time Value'])
    
    # Sort the DataFrame by agent loading and time value
    PV_amplitude_df.sort_values(by=['Sample'], key=lambda x: x.map(metadata_dict.get), inplace=True)
    
    # Export the DataFrame to a CSV
    base_name = os.path.basename(readpath)
    name_without_extension = os.path.splitext(base_name)[0]
    new_name = f"{name_without_extension}_PV-Amplitudes.csv"
    writepath = os.path.join(os.path.dirname(readpath), new_name)
    PV_amplitude_df.to_csv(writepath, index=False)

    # Assign unique colors to each loading value
    loading_values = [metadata_dict[col][0] for col in PV_amplitude_df['Sample']]
    unique_loadings = list(set(loading_values))
    color_map = cm.get_cmap('tab10', len(unique_loadings))
    loading_color_dict = dict(zip(unique_loadings, color_map(range(len(unique_loadings)))))
    bar_colors = [loading_color_dict[loading] for loading in loading_values]

    # Bar Graph
    plt.figure(figsize=(14, 8))
    error_values = [value['A_err'] for value in fit_params_dict.values()]
    plt.bar(PV_amplitude_df['Sample'], PV_amplitude_df['Amplitude'], color=bar_colors, edgecolor='black', yerr=error_values)
    plt.xlabel('Sample', fontsize=14)
    plt.ylabel('Amplitude', fontsize=14)
    plt.title('Amplitude for Each Sample Sorted by Agent Loading and Time', fontsize=16)
    plt.xticks(rotation=30)
    plt.grid(True, axis='y')

    plt.show()

##----------------------------MAIN CODE START----------------------------##

readpath = r"exports\CSV_exports\240226_1e-6_70W_kinetics2_consolidated.csv"
Fit_And_Plot_Pseudo_Voigt_And_A_Bar(readpath)